{"version":3,"sources":["components/atoms/Hamburger/index.tsx","components/organisms/Header/index.tsx","components/organisms/Nav/index.tsx","components/organisms/Hero/index.tsx","components/pages/Home/index.tsx","components/pages/Test/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Hamburger","props","react","type","className","onClick","Header","state","expanded","toggleExpandedState","prevState","_this","setState","handleHamburgerClick","handleOverlayClick","headerClass","classNames","header","header--expanded","this","headerMenuClass","header__menu","header__menu--expanded","concat","atoms_Hamburger","children","React","Nav","componentClass","map","n","key","to","Home","_React$PureComponent","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","title","intro","Helmet","name","content","Hero","Test","App","react_default","a","createElement","Fragment","titleTemplate","defaultTitle","Header_Header","organisms_Nav","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","history","createBrowserHistory","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a33aa7e8.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './_hamburger.scss';\r\n\r\ninterface IProps {\r\n\tonClick: (event: React.MouseEvent<HTMLButtonElement>) => void,\r\n}\r\n\r\nconst Hamburger: React.FC<IProps> = (props) => (\r\n\t<button type=\"button\" className=\"hamburger\" onClick={props.onClick}>\r\n\t\t<span className=\"hamburger__label\">Menu</span>\r\n\t</button>\r\n);\r\n\r\nexport default Hamburger;\r\n","import * as React from 'react';\r\nimport classNames from 'classnames';\r\nimport './_header.scss';\r\n\r\nimport Hamburger from '../../atoms/Hamburger';\r\n\r\ninterface IProps {\r\n\tchildren: React.ReactNode;\r\n}\r\n\r\ninterface IState {\r\n\texpanded: boolean;\r\n}\r\n\r\nexport default class Header extends React.PureComponent<IProps, IState> {\r\n\tstate: IState = {\r\n\t\texpanded: false,\r\n\t};\r\n\r\n\ttoggleExpandedState = () => {\r\n\t\tconst prevState = this.state.expanded;\r\n\t\tthis.setState({ expanded: !prevState });\r\n\t};\r\n\r\n\thandleHamburgerClick = () => {\r\n\t\tthis.toggleExpandedState();\r\n\t};\r\n\r\n\thandleOverlayClick = () => {\r\n\t\tthis.toggleExpandedState();\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst headerClass = classNames({\r\n\t\t\theader: true,\r\n\t\t\t'header--expanded': this.state.expanded,\r\n\t\t});\r\n\r\n\t\tconst headerMenuClass = classNames({\r\n\t\t\theader__menu: true,\r\n\t\t\t'header__menu--expanded': this.state.expanded,\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<header className={`${headerClass} header--sticky`}>\r\n\t\t\t\t<div className=\"header__inner\">\r\n\t\t\t\t\t<div className=\"header__logo\" />\r\n\t\t\t\t\t<div className={headerMenuClass}>\r\n\t\t\t\t\t\t<Hamburger onClick={this.handleHamburgerClick} />\r\n\t\t\t\t\t\t{this.props.children}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"header__overlay\" onClick={this.handleOverlayClick} />\r\n\t\t\t</header>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from 'react';\r\nimport classNames from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\nimport './_nav.scss';\r\n\r\ninterface IProps {\r\n\tchildren: any,\r\n\tclassName?: string,\r\n}\r\n\r\nconst Nav: React.FC<IProps> = (props) => {\r\n\tconst componentClass: string = classNames(props.className, 'nav');\r\n\r\n\treturn <nav className={componentClass}>\r\n\t\t<ul className=\"nav__list\">\r\n\t\t\t{(props.children || []).map((n: Link) => (\r\n\t\t\t\t<li className=\"nav__item\" key={`nav_item_${n.props.to}`}>\r\n\t\t\t\t\t{n}\r\n\t\t\t\t</li>\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t</nav>;\r\n};\r\n\r\nexport default Nav;\r\n","import * as React from 'react';\r\nimport classNames from 'classnames';\r\nimport './_hero.scss';\r\n\r\ninterface IProps {\r\n\tchildren?: React.ReactNode,\r\n\tclassName?: string,\r\n\ttitle: string,\r\n\tintro: string,\r\n}\r\n\r\nexport class Home extends React.PureComponent<IProps> {\r\n\r\n\trender() {\r\n\t\tconst componentClass: string = classNames(this.props.className, 'hero');\r\n\r\n\t\treturn (\r\n\t\t\t<div className={componentClass}>\r\n\t\t\t\t<div className=\"hero__inner\">\r\n\t\t\t\t\t<h1 className=\"hero__heading\">{this.props.title}</h1>\r\n\t\t\t\t\t<p className=\"hero__text intro\">{this.props.intro}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Home;\r\n","import * as React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport './_home.scss';\r\n\r\nimport Hero from '../../organisms/Hero'\r\n\r\nexport default class Home extends React.PureComponent {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"home\">\r\n\t\t\t\t<Helmet>\r\n\t\t\t\t\t<title>Home</title>\r\n\t\t\t\t\t<meta name=\"description\" content=\"Home\" />\r\n\t\t\t\t</Helmet>\r\n\t\t\t\t<Hero title=\"Hero\" intro=\"It's where the heart is.\" />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport './_test.scss';\r\n\r\nimport Hero from '../../organisms/Hero'\r\n\r\nexport default class Test extends React.PureComponent {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<section className=\"test\">\r\n\t\t\t\t<Helmet>\r\n\t\t\t\t\t<title>Test</title>\r\n\t\t\t\t\t<meta name=\"description\" content=\"Test\" />\r\n\t\t\t\t</Helmet>\r\n\t\t\t\t<Hero title=\"Test\" intro=\"Hello there!\" />\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link, Switch, Route } from 'react-router-dom';\nimport 'sanitize.css';\nimport '../themes/v1/scss/style.scss';\n\n// Components\nimport Header from './organisms/Header';\nimport Nav from './organisms/Nav';\nimport Home from './pages/Home/index';\nimport Test from './pages/Test/index';\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Helmet titleTemplate=\"SWM - %s\" defaultTitle=\"SWM\">\n\t\t\t\t<meta name=\"description\" content=\"\" />\n\t\t\t</Helmet>\n\t\t\t<Header>\n\t\t\t\t<Nav>\n\t\t\t\t\t<Link to=\"/\" className=\"nav__link\" title=\"Home\">\n\t\t\t\t\t\tHome\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link to=\"/test\" className=\"nav__link\" title=\"About\">\n\t\t\t\t\t\tTest\n\t\t\t\t\t</Link>\n\t\t\t\t</Nav>\n\t\t\t</Header>\n\t\t\t<main className=\"main\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t\t<Route exact path=\"/test\" component={Test} />\n\t\t\t\t</Switch>\n\t\t\t</main>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <Router history={history}>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}